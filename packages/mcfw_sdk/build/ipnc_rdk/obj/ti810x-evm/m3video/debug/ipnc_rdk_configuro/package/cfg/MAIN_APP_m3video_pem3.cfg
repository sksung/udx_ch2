/*
 *  ======== package/cfg/MAIN_APP_m3video_pem3.cfg ========
 *  This generated configuration script runs the user's configuration script
 *  the context of a specific target and platform in order to generate
 *  all the files necessary to create an executable; e.g., linker command
 *  files, static C/C++ data structures, etc.
 */

/*
 *  ======== _applyChanges ========
 *  Changes that bring the build target to the state at the end of the build
 *  model
 */
function _applyChanges(obj, chgObj) {
    var wasSealed = false;
    if (obj.$sealed) {
        wasSealed = true;
        obj.$unseal();
    }
    for (var prop in chgObj) {
        if (typeof obj[prop] == 'object' && obj[prop] != undefined) {
            if ("$category" in obj[prop] && obj[prop].$category == "Vector") {
               obj[prop].length = chgObj[prop].length;
               for (var i = 0; i < chgObj[prop].length; i++) {
                   if (obj[prop].length < i + 1) {
                       obj[prop].length++;
                   }
                   obj[prop][i] = chgObj[prop][i];
               }
            }
            else {
        	_applyChanges(obj[prop], chgObj[prop]);
            }
	}
	else {
            obj[prop] = chgObj[prop];
	}
    }
    if (wasSealed) {
        obj.$seal();
    }
}

/*
 *  ======== _runescape ========
 *  Recursive unescape to decode serialized strings
 */
function _runescape(obj) {
    for (var i in obj) {
	if (obj[i] != null) {
	    if (typeof obj[i] == 'string') {
		obj[i] = unescape(obj[i]);
	    }
	    else if (typeof obj[i] == 'object') {
		_runescape(obj[i]);
	    }
	}
    }
}

/*
 *  ======== _getPlatCfg ========
 */
function _getPlatCfg() {
    var tmp = {
        externalMemoryMap: [
            [
                "DDR3_RAM",
                {
                    comment: "DDR3_RAM",
                    name: "DDR3_RAM",
                    base: 2147483648,
                    len: 1073741824
                }
            ],
            [
                "OCMC0_RAM",
                {
                    comment: "OCMC0_RAM",
                    name: "OCMC0_RAM",
                    base: 1076887552,
                    len: 262144
                }
            ],
            [
                "OCMC1_RAM",
                {
                    comment: "OCMC1_RAM",
                    name: "OCMC1_RAM",
                    base: 1077936128,
                    len: 262144
                }
            ]
        ],
        customMemoryMap: [
            [
                "LINUX_MEM",
                {
                    comment: "LINUX_MEM",
                    name: "LINUX_MEM",
                    base: 2147483648,
                    len: 188743680
                }
            ],
            [
                "SR1",
                {
                    comment: "SR1",
                    name: "SR1",
                    base: 3141533696,
                    len: 72351744
                }
            ],
            [
                "VIDEO_M3_CODE_MEM",
                {
                    comment: "VIDEO_M3_CODE_MEM",
                    name: "VIDEO_M3_CODE_MEM",
                    base: 2381316096,
                    len: 2097152
                }
            ],
            [
                "DDR_M3",
                {
                    comment: "DDR3_M3",
                    name: "DDR3_M3",
                    base: 2383413248,
                    len: 9437184
                }
            ],
            [
                "DSS_M3_CODE_MEM",
                {
                    comment: "DSS_M3_CODE_MEM",
                    name: "DSS_M3_CODE_MEM",
                    base: 2392850432,
                    len: 2097152
                }
            ],
            [
                "DSS_M3_DATA_MEM",
                {
                    comment: "DSS_M3_DATA_MEM",
                    name: "DSS_M3_DATA_MEM",
                    base: 2394947584,
                    len: 20969472
                }
            ],
            [
                "DSP_CODE_MEM",
                {
                    comment: "DSP_CODE_MEM",
                    name: "DSP_CODE_MEM",
                    base: 2415917056,
                    len: 1024
                }
            ],
            [
                "DSP_DATA_MEM",
                {
                    comment: "DDR3_DSP",
                    name: "DDR3_DSP",
                    base: 2415918080,
                    len: 1024
                }
            ],
            [
                "TILER_MEM",
                {
                    comment: "TILER_MEM",
                    name: "TILER_MEM",
                    base: 2952790016,
                    len: 67108864
                }
            ],
            [
                "SR2_FRAME_BUFFER_MEM",
                {
                    comment: "SR2_FRAME_BUFFER_MEM",
                    name: "SR2_FRAME_BUFFER_MEM",
                    base: 3019898880,
                    len: 104857600
                }
            ],
            [
                "SR0",
                {
                    comment: "SR0",
                    name: "SR0",
                    base: 3124756480,
                    len: 16777216
                }
            ],
            [
                "HDVPSS_DESC_MEM",
                {
                    comment: "HDVPSS_DESC_MEM",
                    name: "HDVPSS_DESC_MEM",
                    base: 3213885440,
                    len: 2097152
                }
            ],
            [
                "HDVPSS_SHARED_MEM",
                {
                    comment: "HDVPSS_SHARED_MEM",
                    name: "HDVPSS_SHARED_MEM",
                    base: 3215982592,
                    len: 2097152
                }
            ],
            [
                "HOST_VPSS_NOTIFYMEM",
                {
                    comment: "HOST_VPSS_NOTIFYMEM",
                    name: "HOST_VPSS_NOTIFYMEM",
                    base: 3218079744,
                    len: 2097152
                }
            ],
            [
                "REMOTE_DEBUG_MEM",
                {
                    comment: "REMOTE_DEBUG_MEM",
                    name: "REMOTE_DEBUG_MEM",
                    base: 3220176896,
                    len: 1048576
                }
            ],
            [
                "L2_RAM",
                {
                    comment: "L2_RAM",
                    name: "L2_RAM",
                    base: 536887296,
                    len: 65536
                }
            ],
            [
                "L2_ROM",
                {
                    comment: "L2_ROM",
                    name: "L2_ROM",
                    base: 0,
                    len: 16384
                }
            ],
            [
                "OCMC0_RAM",
                {
                    comment: "OCMC0_RAM",
                    name: "OCMC0_RAM",
                    base: 1076887552,
                    len: 262144
                }
            ],
            [
                "OCMC1_RAM",
                {
                    comment: "OCMC1_RAM",
                    name: "OCMC1_RAM",
                    base: 1077936128,
                    len: 262144
                }
            ]
        ]
    };
    _runescape(tmp);
    return (tmp);
}
/*
 *  ======== _cfginit ========
 */
function _cfginit() {
    xdc.loadPackage('xdc.services.intern.cmd');
    var prog = xdc.om['xdc.cfg.Program'];

    /* initialize prog attrs from build model */
    var build = {
        profile: "debug",
        cfgScript: "/home/sksung/work/udx/ch2/packages/mcfw_sdk/mcfw/src_bios6/main_app/MAIN_APP_m3video.cfg",
        cfgHome: "ipnc_rdk_configuro",
        cfgArgs: "%257BcoreName%253A%2522VIDEO-M3%2522%252C%2520platformMem%253A%2520%25221024M%2522%257D",
        cfgArgsEncoded: true,
        releases: {
            0: {
                name: "ipnc_rdk_configuro",
                attrs: {
                    prefix: "",
                    label: "default"
                },
                otherFiles: {},
                excludeDirs: {}
            }
        },
        prelink: false
    };
    _runescape(build);
    build.cfgArgs = {coreName:"VIDEO-M3", platformMem: "1024M"};
    build.target = xdc.module("ti.targets.arm.elf.M3");
    var targChange = {
        platform: "ti.platforms.evmTI814X%3Acore1",
        platforms: [
            "ti.platforms.evmTI814X%3Acore0",
            "ti.platforms.evmTI814X%3Acore1"
        ],
        version: "ti.targets.arm.elf.M3%7B1%2C0%2C4.9%2C5",
        extensions: {
            ".sem3": {
                suf: ".sem3",
                typ: "asm"
            },
            ".sv7M": {
                suf: ".sv7M",
                typ: "asm"
            }
        },
        rootDir: "/home/sksung/work/udx/ch2/packages/../ti_tools/cgt470_4_9_5",
        lnkOpts: {
            suffix: "-c%20-m%20%24%28XDCCFGDIR%29/%24@.map%20%20--zero_init%3Doff%20%20--dynamic%20--retain%3D_Ipc_ResetVector"
        },
        ccOpts: {
            suffix: "%20--gcc%20-DTI_8107_BUILD%20-DPLATFORM_EVM_SI%20-DSYSLINK_BUILD_RTOS%20-DUSE_SYSLINK_NOTIFY%3D0%20-DUTILS_ASSERT_ENABLE"
        }
    };
    _runescape(targChange);
    _applyChanges(build.target, targChange);

    prog.build = build;
    
    prog.name = "MAIN_APP_m3video.xem3";
    prog.cfgBase = "package/cfg/MAIN_APP_m3video_pem3";

    prog.endian = prog.build.target.model.endian;
    prog.codeModel = prog.build.target.model.codeModel;

    /* use the platform package's Platform module */
    var Platform = xdc.useModule("ti.platforms.evmTI814X.Platform");
    var platParams = _getPlatCfg();
    var invalidParams = [];
    for (var prop in platParams) {
        if (!(prop in Platform.PARAMS)) {
            delete platParams[prop];
            invalidParams.push(prop);
        }
    }
    prog.platformName = "ti.platforms.evmTI814X:core0";
    prog.platform = Platform.create("core0", _getPlatCfg(), platParams);
    for (var i = 0; i < invalidParams.length; i++) {
        Platform.$logWarning("The parameter '" + invalidParams[i] + "' is " +
            "passed to this platform instance through Build.platformTable, " +
            "but the instance does not have a configuration parameter with " +
            "that name.", prog.platform, "core0");
    }

    /* record the executable's package name */
    prog.buildPackage = "ipnc_rdk_configuro";

    /* record build-model information required during config generation */
    prog.$$bind("$$isasm", 0);
    prog.$$bind("$$isrom", 0);
    prog.$$bind("$$gentab", [
    ]);
    
    /* bind prog to an appropriate execution context */
    prog.cpu = prog.platform.getExeContext(prog);

    /* import the target's run-time support pkg */
    xdc.loadPackage("ti.targets.arm.rtsarm");
}
    
/* function to import the cfg script's package */
function _userscript($$legacy, script) {
    var home;
    var spath;
    home = xdc.loadPackage("ipnc_rdk_configuro");
    
    xdc.om.$$bind('$homepkg', home);

    var platParams = _getPlatCfg();

    /* load & run program cfg script and monitor all loaded files */
    _runCfg("/home/sksung/work/udx/ch2/packages/mcfw_sdk/mcfw/src_bios6/main_app/MAIN_APP_m3video.cfg", spath, "package/cfg/MAIN_APP_m3video_pem3",  
             undefined, 
             undefined,
             platParams, script);

    /*
     *  ======== _loadOrEval ========
     *  Either load the user configuration script from disk, or else
     *  execute the supplied source text directly. In either case,
     *  provide the same execution environment.
     */
    function _loadOrEval(cfgScript, noTrack, path, script) {
        if (!script) {
            utils.loadCapsule(cfgScript, noTrack, path);
        }
        else {
            /* set up the same environment that loadCapsule would */
            var $saveCsd = utils.csd;
            var $cfgFile = utils.findFile(cfgScript, path);
            var cname = cfgScript;
            if ($cfgFile) {
                $cfgFile = java.io.File($cfgFile);
                utils.csd = $cfgFile.getParentFile().getCanonicalPath();
                cname = "" + $cfgFile.getCanonicalPath();
            }

            /* create the capsule object */
            var cap = {
                prototype:  utils.global,
                $path:      cname,
                $private:   {path: cname},
                $capsule:   undefined,      /* set to cap below */
            };

            /* 'this.$capsule' is always cap object */
            cap.$capsule = cap;

            /* save the capsule object */
            utils.$$capmap[cname] = cap;

            try {
                var cx =
                    Packages.org.mozilla.javascript.Context.getCurrentContext();
                var rdr = new
                    java.io.BufferedReader(new java.io.StringReader(script));
                Packages.config.Shell.evaluateLoad(cx, cap, rdr, cname, 1);
            }
            finally {
                rdr.close();
                utils.csd = $saveCsd;
            }
        }
    }

    /*
     *  ======== _runCfg ========
     *  Run a user supplied configuration script and prevent user's script from
     *  overwriting the global variable prog.
     */
    function _runCfg(cfgScript, path, programName, legacyTcf, legacyCfg,
        platParams, script)
    {
        if (legacyTcf) {
            /* save current global variables */
            var $save = {prog: utils.global.prog, Program: Program};
    
            /* initialize global variables for legacy config scripts */
            environment["config.programName"] = programName;
            environment["config.platform"] = Program.platformName;
            utils.seedPath = environment["config.importPath"];
            utils.loadPlatform.params = platParams;
            Program = $$legacy.Program;     /* defined in cfg.tci */
            
            /* run legacy config script with prog == to RTSC Program; this
             * allows legacy script to read build atributes from RTSC model
             * before re-creating the prog object
             */
            utils.loadCapsule(cfgScript, false, path);  
    
            /* restore global variables; now prog == TCOM prog because
             * utils.loadPlatform() creates the TCOM prog object.
             */
            $$legacy.prog = utils.global.prog;  /* in case XDC wants it */
            utils.global.prog = $save.prog;
            Program = $save.Program;
    
            /* run XDC configuration script, if it exists */
            if (legacyCfg) {
                utils.importFile(cfgScript.replace(/\.tcf/, ".cfg"), path);
            }
        }
        else {
            _loadOrEval(cfgScript, false, path, script);
        }
    }
}
    
function _postinit() {

    var cout = null;

    var Program = xdc.om['xdc.cfg.Program'];
    /* get the exec command for this executable */
    if (Program.execCmd == null) {
        Program.execCmd = Program.platform.getExecCmd(Program,
            xdc.om["ti.platforms.evmTI814X"].packageBase);
    }
    cout = "define EXEC." + Program.name + '\n\n';
    cout += Program.execCmd;
    cout += "\nendef\n\n";

    /* if SourceDir generates a makefile, we need to run it */
    _genSourceDirMak("package/cfg/MAIN_APP_m3video_pem3", "MAIN_APP_m3video.pem3");

    utils.genDep("package/cfg/MAIN_APP_m3video_pem3", "ipnc_rdk_configuro", utils.loadedFiles, cout, null);
}

function _genSourceDirMak(cfgBase, cfgName)
{
    var SourceDir = xdc.om['xdc.cfg.SourceDir'];

    if (SourceDir && SourceDir.$instances.length > 0) {
        /* construct rule to run SourceDir generated makefile */
        var make = "\t$(MAKE) -f "
            + SourceDir.outputDir + "/" + SourceDir.makefileName;
    
        /* this file is included by package.mak (if it exists) */
        var file = new java.io.File(cfgBase + ".cfg.mak");
        file["delete"]();
        var out = new java.io.BufferedWriter(new java.io.FileWriter(file));

        /* add rules to run SourceDir generated makefile */
        out.write("# invoke SourceDir generated makefile for " + cfgName
            + "\n" + cfgName + ": .libraries," + cfgName
            + "\n.libraries," + cfgName + ": " + cfgBase + ".xdl\n"
            + make + "\n\n"
            + "clean::\n" + make + " clean\n\n"
        );
        out.close();
        out = null;
    }
}
