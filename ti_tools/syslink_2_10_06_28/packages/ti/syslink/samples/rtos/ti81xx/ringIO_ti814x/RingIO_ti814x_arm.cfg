/** 
 *  @file   RingIO_ti814x_arm.cfg
 *
 *  @brief      RTOS configuration file
 *
 *
 *  ============================================================================
 *
 *  Copyright (c) 2008-2012, Texas Instruments Incorporated
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions
 *  are met:
 *  
 *  *  Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *  
 *  *  Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 *  
 *  *  Neither the name of Texas Instruments Incorporated nor the names of
 *     its contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *  
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 *  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 *  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 *  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 *  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 *  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 *  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 *  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 *  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *  Contact information for paper mail:
 *  Texas Instruments
 *  Post Office Box 655303
 *  Dallas, Texas 75265
 *  Contact information: 
 *  http://www-k.ext.ti.com/sc/technical-support/product-information-centers.htm?
 *  DCMP=TIHomeTracking&HQS=Other+OT+home_d_contact
 *  ============================================================================
 *  
 */




var MultiProc              = xdc.useModule('ti.sdo.utils.MultiProc');
MultiProc.setConfig("HOST", ["DSP","VIDEO-M3", "VPSS-M3", "HOST"]);

var BIOS = xdc.useModule('ti.sysbios.BIOS');


Program.global.ipcWithDSP = 1;
Program.global.ipcWithVPSSM3 = 1;
Program.global.ipcWithVIDEOM3  = 1;

var Cache = xdc.useModule('ti.sysbios.family.arm.a8.Cache');
var Mmu = xdc.useModule('ti.sysbios.family.arm.a8.Mmu');
Mmu.enableMMU = true;

/* Load the common configuration */
xdc.loadCapsule("RingIO_ti814x_common.cfg");

xdc.loadPackage('ti.syslink.procMgr.rtos.bios6');
xdc.loadPackage ('ti.syslink.family.rtos.bios6.ti814x');

var HalCache = xdc.useModule('ti.sysbios.hal.Cache');
HalCache.CacheProxy = Cache;
/*
 *  Configure RAM file system to load existing RAM disk image stored in C array
 *      ramDiskArray[]
 */
var FatFS = xdc.useModule('ti.sysbios.fatfs.FatFS');
FatFS.ramdiskSymbolName = "RamDiskArray";
FatFS.ramdiskDriveId = 0;

var attrs0 =
{
    type       : Mmu.FirstLevelDesc_SECTION,  // SECTION descriptor
    bufferable : false,                       // bufferable
    cacheable  : false,                       // cacheable
    imp        : 1,                           // implementation defined
    domain     : 0,                           // domain between 0-15
    accPerm    : 3,                           // read/write permission
};

/* create a table entry for 0 so that CCS won't DAP access at 0 error */
Mmu.setFirstLevelDescMeta(0x0, 0x0, attrs0);

var attrs1 =
{
    type       : Mmu.FirstLevelDesc_SECTION,  // SECTION descriptor
    bufferable : false,                        // bufferable
    cacheable  : false,                        // cacheable
    imp        : 1,                           // implementation defined
    domain     : 0,                           // domain between 0-15
    accPerm    : 3,                           // read/write permission
    noexecute  : true
};

/* Mapping PRCM */
for (var i=0x40000000; i < 0x60000000; i = i + 0x00100000) {
// Each 'SECTION' descriptor entry spans a 1MB address range
    Mmu.setFirstLevelDescMeta(i, i, attrs1);
}


var attrs2 =
{
    type       : Mmu.FirstLevelDesc_SECTION,  // SECTION descriptor
    bufferable : true,                        // bufferable
    cacheable  : false,                        // cacheable
    imp        : 1,                           // implementation defined
    domain     : 0,                           // domain between 0-15
    accPerm    : 3,                           // read/write permission
};

/* M3 DUcati DDR */
for (var i=0x8F000000; i < 0x90000000; i = i + 0x00100000) {
    // Each 'SECTION' descriptor entry spans a 1MB address range
    Mmu.setFirstLevelDescMeta(i, i, attrs2);
}

/* DSP's DDR */
for (var i=0x8B000000; i < 0x8D000000; i = i + 0x00100000) {
    // Each 'SECTION' descriptor entry spans a 1MB address range
    Mmu.setFirstLevelDescMeta(i, i, attrs2);
}

var attrs =
{
    type       : Mmu.FirstLevelDesc_SECTION,  // SECTION descriptor
    bufferable : true,                        // bufferable
    cacheable  : true,                        // cacheable
    imp        : 1,                           // implementation defined
    domain     : 0,                           // domain between 0-15
    accPerm    : 3,                           // read/write permission
};

/* SR1*/
for (var i=0x8E000000; i < 0x8F000000; i = i + 0x00100000) {
    // Each 'SECTION' descriptor entry spans a 1MB address range
    Mmu.setFirstLevelDescMeta(i, i, attrs);
}
/*SR0 */
for (var i=0x8D000000; i < 0x8DC00000; i = i + 0x00100000) {
    // Each 'SECTION' descriptor entry spans a 1MB address range
    Mmu.setFirstLevelDescMeta(i, i, attrs);
}

               // Set the descriptor for each entry in the address range
/* DDR for A8 */
for (var i=0x80000000; i < 0x0A600000; i = i + 0x00100000) {
    // Each 'SECTION' descriptor entry spans a 1MB address range
    Mmu.setFirstLevelDescMeta(i, i, attrs);
}

var memmap = Program.cpu.memoryMap;
var DDR = null;

// Find DDR in memory map
for (var i=0; i < memmap.length; i++) {
    if (memmap[i].name == "EXT_RAM") {
        DDR = memmap[i];
    }
}

// Place the MMU table in the DDR memory segment if it exists
if (DDR != null) {
    var sectionName = "ti.sysbios.family.arm.a8.mmuTableSection";
    Program.sectMap[sectionName] = new Program.SectionSpec();
    Program.sectMap[sectionName].type = "NOINIT";
    Program.sectMap[sectionName].loadSegment = "EXT_RAM";
}
else {
    print("No DDR memory segment was found");
}

var HeapMem = xdc.useModule('ti.sysbios.heaps.HeapMem');
var params = new HeapMem.Params;
params.size = 0xA00000;
var heap2 = HeapMem.create(params);

var Memory = xdc.useModule('xdc.runtime.Memory');
Memory.defaultHeapInstance = heap2;
Memory.defaultHeapSize = 0xA00000;

/* Need to initialize the shared memory by one processor.In this case
 * DSP will do  the initialization
 */
Program.global.MAXPROCESSORS = MultiProc.numProcessors;
Program.global.LOCALPROCID   = MultiProc.id;

