/* 
 * Copyright (c) 2012, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 */
/*
 *  ======== preConfig.cfg ========
 */
//Plug xdc.runtime and xdc.runtime.knl proxies
var Settings = xdc.useModule('ti.sdo.xdcruntime.linux.Settings');

// xdc.runtime modules
var Assert = xdc.useModule('xdc.runtime.Assert');
var Diags = xdc.useModule('xdc.runtime.Diags');
var Defaults = xdc.useModule('xdc.runtime.Defaults');
var Error = xdc.useModule('xdc.runtime.Error');
var GateNull = xdc.useModule('xdc.runtime.GateNull');
var HeapStd = xdc.useModule('xdc.runtime.HeapStd');
var Log = xdc.useModule('xdc.runtime.Log');
var LoggerSys = xdc.useModule('xdc.runtime.LoggerSys');
var Memory = xdc.useModule('xdc.runtime.Memory');
var Registry = xdc.useModule('xdc.runtime.Registry');
var Rta = xdc.useModule('xdc.runtime.Rta');
var Startup = xdc.useModule('xdc.runtime.Startup');
var System = xdc.useModule('xdc.runtime.System');
var Timestamp = xdc.useModule('xdc.runtime.Timestamp');
var Text = xdc.useModule('xdc.runtime.Text');
var Main = xdc.useModule('xdc.runtime.Main');

// xdc.runtime.knl modules
var GateH = xdc.useModule('xdc.runtime.knl.GateH');
var GateThread = xdc.useModule('xdc.runtime.knl.GateThread');
var GateProcess = xdc.useModule('xdc.runtime.knl.GateProcess');
var SemThread = xdc.useModule('xdc.runtime.knl.SemThread');
var SemProcess = xdc.useModule('xdc.runtime.knl.SemProcess');
var Semaphore = xdc.useModule('xdc.runtime.knl.Semaphore');
var Sync = xdc.useModule('xdc.runtime.knl.Sync');
var SyncGeneric = xdc.useModule('xdc.runtime.knl.SyncGeneric');
var SyncNull = xdc.useModule('xdc.runtime.knl.SyncNull');
var SyncSemmThread = xdc.useModule('xdc.runtime.knl.SyncSemThread');
var Thread = xdc.useModule('xdc.runtime.knl.Thread');

//xdcruntime modules
var HeapStdAlign = xdc.useModule('xdcruntime.heaps.HeapStdAlign');
var LoggerFlex = xdc.useModule('xdcruntime.cstubs.LoggerFlex');

// xdc.runtime configuration
Program.heap = 0xffffffff;
Memory.defaultHeapInstance = HeapStdAlign.create({size: 0xffffffff});

// ANSI C library based
System.SupportProxy = xdc.useModule('xdc.runtime.SysStd');
var linuxGate = xdc.useModule('ti.sdo.xdcruntime.linux.GateThreadSupport');
System.common$.gate = linuxGate.create();

// gettimeofday()-based
Timestamp.SupportProxy =
      xdc.useModule('ti.sdo.xdcruntime.linux.TimestampPosix');

var sysLogger = LoggerFlex.create();

Defaults.common$.logger = sysLogger;

Defaults.common$.diags_ASSERT = Diags.ALWAYS_ON;
Defaults.common$.diags_ENTRY = Diags.RUNTIME_OFF;
Defaults.common$.diags_EXIT = Diags.RUNTIME_OFF;
Defaults.common$.diags_INTERNAL = Diags.ALWAYS_ON;
Defaults.common$.diags_LIFECYCLE = Diags.RUNTIME_OFF;
Defaults.common$.diags_STATUS = Diags.ALWAYS_ON;
Defaults.common$.diags_USER1 = Diags.RUNTIME_OFF;
Defaults.common$.diags_USER2 = Diags.RUNTIME_OFF;
Defaults.common$.diags_USER3 = Diags.RUNTIME_OFF;
Defaults.common$.diags_USER4 = Diags.RUNTIME_OFF;
Defaults.common$.diags_USER5 = Diags.RUNTIME_OFF;
Defaults.common$.diags_USER6 = Diags.RUNTIME_OFF;
Defaults.common$.diags_INFO = Diags.RUNTIME_OFF;
Defaults.common$.diags_ANALYSIS = Diags.RUNTIME_OFF;

Registry.common$.logger = sysLogger;
Diags.setMaskMeta("xdc.runtime.Registry", Diags.ALL, Diags.RUNTIME_OFF);
/*
 *  @(#) linuxdist; 1, 0, 0,1; 2-15-2012 07:46:08; /db/atree/library/trees/osal/osal-e09/src/ xlibrary

 */

