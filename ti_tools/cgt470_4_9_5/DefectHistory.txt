ARM C/C++ CODE GENERATION TOOLS
4.9.5
May 2012
Defect History

------------------------------------------------------------------------------
Table of Contents
------------------------------------------------------------------------------
1.  4.9.5 Fixed Issues
2.  4.9.4 Fixed Issues
3.  4.9.3 Fixed Issues
4.  4.9.2 Fixed Issues
5.  4.9.1 Fixed Issues
6.  Current Known Issues


------------------------------------------------------------------------------
1. 4.9.5 Fixed Issues
------------------------------------------------------------------------------

------------------------------------------------------------------------------
FIXED  SDSCM00042194
------------------------------------------------------------------------------

Summary            : Partial link drops weak function symbol

Fixed in           : 4.9.5
Severity           : S2 - Major
Affected Component : C/C++ Compiler (cl)

------------------------------------------------------------------------------
FIXED  SDSCM00042914
------------------------------------------------------------------------------

Summary            : Linker segfault using partial link output file of C++
		     source with ELF and exceptions enabled

Fixed in           : 4.9.5
Severity           : S2 - Major
Affected Component : ELF Linker

Description: 
The linker fails with a segmentation fault when using a file created by
partial linking C++ code with exceptions enabled and using the ELF file
format.  While the first (partial) link appears to succeed, a second
link using the (corrupted) output file from the partial link causes the
linker to segfault and stop.

------------------------------------------------------------------------------
FIXED  SDSCM00043468
------------------------------------------------------------------------------

Summary            : Compiler update for Silicon Erratum Cortex-R4#57 for 
                     TMS570LS3xxx

Fixed in           : 4.9.5
Severity           : S2 - Major
Affected Component : C/C++ Compiler

Description: Please reference the Gladiator errata SPNZ181, Cortex-R4#57
http://www.ti.com/lit/er/spnz181a/spnz181a.pdf 

The --arm_vmrs_si_workaround=on|off option was added to prevent a conditional 
VMRS instruction from being generated by the compiler.  By default, the option is 
enabled (on).  A warning will be emitted if a developer attempts to add a 
conditional VMRS instruction to the assembly file when the option is enabled.  
The developer can turn the option off using --arm_vmrs_si_workaround=off.

------------------------------------------------------------------------------
FIXED  SDSCM00043538
------------------------------------------------------------------------------

Summary            : The --unaligned_access=on option is not valid for v4 and
		     v5e architectures

Fixed in           : 4.9.5
Severity           : S3 - Minor
Affected Component : Shell

Description: 
The ARM9 and ARM7 cores do not support unaligned accesses in the
hardware. The compiler --unaligned_access=on option should not be used
when generating code for these cores. For ARM11 and up, the hardware
can be configured to support unaligned accesses. If the hardware
support is enabled, the user can use the --unaligned_access=on option
to enable the compiler to generate these accesses.

------------------------------------------------------------------------------
FIXED  SDSCM00043642
------------------------------------------------------------------------------

Summary            : Compiler incorrectly simplifies "(x >> k1) < k2" when k2 is
		     constant smaller than int

Fixed in           : 4.9.5
Severity           : S1 - Critical / PS
Affected Component : C/C++ Compiler (cl)

Description: 
Given an IF with a predicate like "(x >> k1) < k2", the compiler will 
attempt to convert it to "x < (k2<<k1)".  If k2 is a literal or const 
variable whose type is too small to hold k2<<k1, the result will be 
incorrect.  The compiler should use a wider type, the promoted type of 
x;  the workaround is to do the same thing in the source.

------------------------------------------------------------------------------
FIXED  SDSCM00043868
------------------------------------------------------------------------------

Summary            : Linker cannot find include file specified with relative
		     path

Fixed in           : 4.9.5
Severity           : S2 - Major
Affected Component : Linker

Description: 


Workaround: 
This bug occurs because the linker does not properly reset the source
path after processing an #include, causing a second #include to be
relative to the wrong path. Any intervening token between the two
#include directive will overcome this, as will any macro expansion
(even if empty). For example

#define SPACE
#include "../first.cmd"
SPACE
#include "../second.cmd"


------------------------------------------------------------------------------
2. 4.9.4 Fixed Issues
------------------------------------------------------------------------------

------------------------------------------------------------------------------
FIXED  SDSCM00042570
------------------------------------------------------------------------------

Summary            : Missing MISRA 19.15

Fixed in           : 4.9.4
Severity           : S3 - Minor
Affected Component : C/C++ Compiler (cl)

Description: 
MISRA 19.15 not selectable in CCS v5.1.

------------------------------------------------------------------------------
FIXED  SDSCM00042595
------------------------------------------------------------------------------

Summary            : Compiler generates an internal error "no match for COMPARE"
		     for the attached testcase

Fixed in           : 4.9.4
Severity           : S2 - Major
Affected Component : C/C++ Compiler (cl)

Description: 
Use of unsigned long long types in a comparison causes a codegen crash.

------------------------------------------------------------------------------
FIXED  SDSCM00043036
------------------------------------------------------------------------------

Summary            : Assembler generates segmentation fault

Fixed in           : 4.9.4
Severity           : S2 - Major
Affected Component : Assembler

Description: 
Assembler generates segmentation fault with an asm statement 
that attempts to access a C function parameter.

------------------------------------------------------------------------------
FIXED  SDSCM00043069
------------------------------------------------------------------------------

Summary            : CDP instruction not accepted for v4 versions

Fixed in           : 4.9.4
Severity           : S3 - Minor
Affected Component : Assembler

Description: 
The CDP instruction generates an assembler error for version v4 in
arm-mode. 

------------------------------------------------------------------------------
FIXED  SDSCM00043143
------------------------------------------------------------------------------

Summary            : Compiler incorrectly rewrites expression as rotate
		     operation

Fixed in           : 4.9.4
Severity           : S2 - Major
Affected Component : C/C++ Compiler (cl)

Description: 
An expression such as

(ptr->obj->a << 16) | (ptr->obj->b >> 16) 

does not produce correct code, with the right shift and or not being 
included in the generated code.

------------------------------------------------------------------------------
FIXED  SDSCM00043152
------------------------------------------------------------------------------

Summary            : Optimizer issues information advice using optimizer's
		     temporary symbols instead of using symbols from 
                     user code

Fixed in           : 4.9.4
Severity           : S3 - Minor
Affected Component : Optimizer

Description: 
The optimiser may issue alias advice that refers to the optimiser's 
temporary symbols, whose declarations the user cannot control.	This 
advice does not affect the code's behavior, though it leaves some 
suggested improvements inaccessible.

------------------------------------------------------------------------------
FIXED  SDSCM00043223
------------------------------------------------------------------------------

Summary            : Compiler may miss alias given struct-of-array-of-structs

Fixed in           : 4.9.4
Severity           : S1 - Critical / PS
Affected Component : C/C++ Compiler (cl)

Description: 
In a particular situation involving a struct containing an array of 
structs, the compiler may miss an alias between a read and write of a 
scalar field in the nested struct.

------------------------------------------------------------------------------
FIXED  SDSCM00043326
------------------------------------------------------------------------------

Summary            : Extremely long (templated) type names may overflow buffer,
		     causing crash

Fixed in           : 4.9.4
Severity           : S2 - Major
Affected Component : Optimizer

Description: 
The optimiser may crash when it encounters an extremely long type name
-- 
for example, a deep nested templated C++ class name -- while creating a
printed representation.  The crash is most likely, and perhaps only 
occurs, with -o2 or -o3.


------------------------------------------------------------------------------
3. 4.9.3 Fixed Issues
------------------------------------------------------------------------------

------------------------------------------------------------------------------
FIXED  SDSCM00037170
------------------------------------------------------------------------------

Summary            : Embed does not handle cross-filesystem rename correctly

Fixed in           : 4.9.3
Severity           : S2 - Major
Affected Component : Embed Utility

Description: 
The embed utility needs to copy the file across file systems before
renaming it.

------------------------------------------------------------------------------
FIXED  SDSCM00040101
------------------------------------------------------------------------------

Summary            : Compiler generates temporary files when compiling C++ files
		     with templates and -pm that are not automatically deleted

Fixed in           : 4.9.3
Severity           : S3 - Minor
Affected Component : C/C++ Compiler (cl)

Description: 
When compiling C++ files which use templates with -pm option the
compiler generates temporary files that are not automatically deleted.

------------------------------------------------------------------------------
FIXED  SDSCM00042012
------------------------------------------------------------------------------

Summary            : The .TI.symbol.alias section has an invalid sh_type field
		     for ARM

Fixed in           : 4.9.3
Severity           : S2 - Major
Affected Component : Assembler

Description: 
The section, .TI.symbol.alias, receives an invalid sh_type in ARM
object files. The type should be SHT_PROGBITS, but it is set to 0x70000006, 
which is reserved by the ARM EABI. This should not cause any issues
when linking with the TI tools, but it can cause other vendors to reject the
object files when linking. The other potential issue is if this flag is
interpreted differently in the future because ARM assigned some
property to the type number.

------------------------------------------------------------------------------
FIXED  SDSCM00042053
------------------------------------------------------------------------------

Summary            : Near a loop that comes from an include file, the .dwpsn 
                     directives have the wrong file name

Fixed in           : 4.9.3
Severity           : S2 - Major
Affected Component : C/C++ Compiler (cl)

Description: 
Fixed a bug where debug information near an inlined loop could contain 
the incorrect file name.

------------------------------------------------------------------------------
FIXED  SDSCM00042340
------------------------------------------------------------------------------

Summary            : Compiler mistakenly issues diagnostic about destructor for
		     base class is not virtual

Fixed in           : 4.9.3
Severity           : S3 - Minor
Affected Component : C/C++ Compiler (cl)

Description: 
The no virtual base class destructor diagnostic will no longer be
emitted when the base class has a virtual destructor.  

------------------------------------------------------------------------------
FIXED  SDSCM00042368
------------------------------------------------------------------------------

Summary            : Parser generates segmentation fault

Fixed in           : 4.9.3
Severity           : S2 - Major
Affected Component : C/C++ Compiler (cl)

Description: 
Parser generates segmentation fault when compiling the following source
file

static const int a[1];

int main(void)
{
    (void)a[0];

    return 0;
}

static const int a[1] = { 0 };

------------------------------------------------------------------------------
FIXED  SDSCM00042506
------------------------------------------------------------------------------

Summary            : Quest/colon (?) expression on floats, cast to int, may
		     cause compiler hang

Fixed in           : 4.9.3
Severity           : S2 - Major
Affected Component : C/C++ Compiler (cl)

Description: 
The compiler may hang in the optimiser stage when given a quest/colon 
(?) expression of floating-point type which is cast to int, when 
compiling at -o2 or higher.  The problem is specific to ?, not to other
expressions, and requires the mixture of floating and integral types.

------------------------------------------------------------------------------
FIXED  SDSCM00042511
------------------------------------------------------------------------------

Summary            : Parser crash

Fixed in           : 4.9.3
Severity           : S2 - Major
Affected Component : Parser

Description: 
The seg fault occurred because a static const variable definition appeared
after the variable reference.  The parser made a false assumption that a definition
must appear before the reference. As a result, the parser
improperly removed the static const definition, causing a seg fault. 
This false assumption has been removed.

------------------------------------------------------------------------------
FIXED  SDSCM00042541
------------------------------------------------------------------------------

Summary            : C math library drags in feraiseexcept and malloc, which is
                     undesirable
Fixed in           : 4.9.3
Severity           : S3 - Minor
Affected Component : Runtime Support Libraries (RTS)

Description:
The raise() function has been changed to avoid calling fputs(). The default 
handling of signals has been changed to do nothing. This can be changed by using 
the signal() function to install custom handlers.

------------------------------------------------------------------------------
FIXED  SDSCM00042542
------------------------------------------------------------------------------

Summary            : Some math functions like ldexp() will cause fputs and its
                     required functions like malloc to be included
Fixed in           : 4.9.3
Severity           : S2 - Major
Affected Component : Runtime Support Libraries (RTS)

Description:
The floating point math functions contain calls to catch floating point 
exceptions. These calls eventually call the raise() function, which by default 
uses fputs() to relay the exception to the user. This is incorrect. The 
raise() function will be altered to do nothing by default.

------------------------------------------------------------------------------
FIXED  SDSCM00042563
------------------------------------------------------------------------------

Summary            : Optimiser crashes on certain loop cases

Fixed in           : 4.9.3
Severity           : S2 - Major
Affected Component : C/C++ Compiler (cl)

Description: 
Certain loop structures, which we are not able to describe concisely,
can cause the optimiser to crash when compiling at -o2 or higher.  The
one known example involves C++ code and a lot of inlining;  adjusting
the inlining avoids the problem.

------------------------------------------------------------------------------
FIXED  SDSCM00042604
------------------------------------------------------------------------------

Summary            : The ARM compiler does not correctly set the last bit for
		     thumb function symbol values.

Fixed in           : 4.9.3
Severity           : S2 - Major
Affected Component : Assembler

Description: 
This bug will cause interlinking problems with other vendors linkers.
The GCC linker is known to rely on the last bit to determine if a BL needs
to be converted to a BLX instruction. This bug will cause applications
with object files produced by the TI compiler and consumed by the GCC linker
to fail if thumb instructions are used.

------------------------------------------------------------------------------
FIXED  SDSCM00042632
------------------------------------------------------------------------------

Summary            : Functions declared static get global visibility when
		     compiled with optimization in EABI mode

Fixed in           : 4.9.3
Severity           : S2 - Major
Affected Component : C/C++ Compiler (cl)

Description: 
Fixed a bug wherein two functions, one static and one global where one
function contains code and the other simply calls the first, were
aliased together, essentially removing the static state of one function
and causing it to be visible globally.

------------------------------------------------------------------------------
FIXED  SDSCM00042640
------------------------------------------------------------------------------

Summary            : Function-like macros in Compiler.h should not have space
		     between name and left paren

Fixed in           : 4.9.3
Severity           : S2 - Major
Affected Component : Runtime Support Libraries (RTS)

Description: 
The macros defined in Compiler.h that take arguments have a space
between the identifier and open parenthesis which causes the arguments to be
part of the macro expansion.

------------------------------------------------------------------------------
FIXED  SDSCM00042653
------------------------------------------------------------------------------

Summary            : When generating VFP code, the presence of an interrupt in a
		     file may cause other functions in that file to save the FPSCR

Fixed in           : 4.9.3
Severity           : S3 - Minor
Affected Component : Code Generator

Description: 
This is a performance bug and should not cause incorrect code. The
issue is that sometimes the FPSCR and FPEXC registers will be saved to the
stack needlessly upon entry to a function.


------------------------------------------------------------------------------
4. 4.9.2 Fixed Issues
------------------------------------------------------------------------------

------------------------------------------------------------------------------
FIXED  SDSCM00040065
------------------------------------------------------------------------------

Summary            : dis470, ofd470 crash with IAR object code, ARM linker does
		     not handle R_ARM_THM_PC12 relocation
		     type correctly

Fixed in           : 4.9.2
Severity           : S2 - Major
Affected Component : Linker

Description: 
The linker will produce overflow warnings for relocations on ARM. The 
specific relocation that caused this to be noticed is the ARM_THM_PC8 
type. The ARM ELF manual states that only the R_ARM_ABS16, R_ARM_ABS8, 
and R_ARM_PREL31 types should have overflow checking done. The rest of 
the relocation types should have their results masked off before being 
written. The resulting output file should be correct if these warnings 
are generated, but the file should inspected to ensure the correct
value was generated for each relocation warning

------------------------------------------------------------------------------
FIXED  SDSCM00040151
------------------------------------------------------------------------------

Summary            : Getting compile time generated symbol re-definition error
		     during linking C674x ELF target

Fixed in           : 4.9.2
Severity           : S2 - Major
Affected Component : C/C++ Compiler (cl)

Description: 
The linker may generate "duplicate symbol" errors for symbols named
like _TI_DW_.debug_info.<checksum> when linking object files.  Using ofd, it
can be seen that these symbols are signatures for COMDAT groups.  This
is an error in COMDAT generation in the assembler and linker.

------------------------------------------------------------------------------
FIXED  SDSCM00040650
------------------------------------------------------------------------------

Summary            : Error when specifying 400 or more to precision of output
		     format specifier

Fixed in           : 4.9.2
Severity           : S3 - Minor
Affected Component : C/C++ Compiler (cl)

Description: 
The minimum max conversion (precision) printf size to be C89 compliant
is 509.   The conversion size is now C89 compliant.

------------------------------------------------------------------------------
FIXED  SDSCM00040698
------------------------------------------------------------------------------

Summary            : Optimiser may crash if given loop nest in which innermost
		     loop unconditionally returns

Fixed in           : 4.9.2
Severity           : S2 - Major
Affected Component : Optimizer

Description: 
A loop nest with an inner loop that returns unconditionally may cause
the optimiser to crash.

------------------------------------------------------------------------------
FIXED  SDSCM00041565
------------------------------------------------------------------------------

Summary            : Optimizer error, 2-dimensional array, 2 multiplications

Fixed in           : 4.9.2
Severity           : S2 - Major
Affected Component : Optimizer

Description: 
The optimiser may abort if it encounters a sum of a pair of multiplies 
which can be represented as a _dotp2 call, if the operands are adjacent
array references.  Multiplies of scalar variables are not affected, and
_dotp2 possibilities that require unrolling a loop are not affected.

------------------------------------------------------------------------------
FIXED  SDSCM00041569
------------------------------------------------------------------------------

Summary            : Optimizer removes weak object pointer check

Fixed in           : 4.9.2
Severity           : S3 - Minor
Affected Component : Optimizer

Description: 
The optimiser believed that UAND-of-NAME was always non-NULL.  That's
not true for weak symbols.

------------------------------------------------------------------------------
FIXED  SDSCM00041776
------------------------------------------------------------------------------

Summary            : Optimizer substitutes packed bitfield reference without
		     masking value at -o1

Fixed in           : 4.9.2
Severity           : S2 - Major
Affected Component : Optimizer

Description: 
Under certain specific circumstances, the compiler may replace an
assignment to a bitfield with a temporary variable whose value has not
been properly truncated as the original assignment did.  To cause the
bug, several passes that do the right thing must be inhibited;	one
known way is to use -o1 and a packed struct.

------------------------------------------------------------------------------
FIXED  SDSCM00041786
------------------------------------------------------------------------------

Summary            : Certain oversized vectorisation cases cause optimiser crash

Fixed in           : 4.9.2
Severity           : S2 - Major
Affected Component : Optimizer

Description: 
Certain very wide vectorisation cases may cause an 
optimiser crash.  Loops involving operations with one short operand and
one int operand may trigger the crash.	Loops doing a saturated 
subtraction of shorts and saving the result in a short may trigger the 
crash.	In both cases, an UNROLL pragma will work around the problem;  
see Workarounds.

------------------------------------------------------------------------------
FIXED  SDSCM00041828
------------------------------------------------------------------------------

Summary            : Internal error when compiling c++ code

Fixed in           : 4.9.2
Severity           : S2 - Major
Affected Component : C/C++ Compiler (cl)

Description: 
Use of an anonymous namespace in eabi mode causes a parser crash

namespace {
   class X  public Y {
      public
	 X ()  Y("Test") { }
   };
}

cl470.exe -mv7M3 -g -me --abi=eabi t.cpp

INTERNAL ERROR acpia470 experienced a segmentation fault while
		processing

------------------------------------------------------------------------------
FIXED  SDSCM00041888
------------------------------------------------------------------------------

Summary            : Compiler incorrectly exposes static function as global,
		     when building with optimization and EABI

Fixed in           : 4.9.2
Severity           : S2 - Major
Affected Component : C/C++ Compiler (cl)

Description: 
Fixed bug where a static function that only calls another function
would be considered a global symbol.

The .symalias assembly directive turns any symbol attached to it into a
global symbol. When compiling in EABI mode, if a static function is 
aliased with another function, it will be exposed incorrectly as a
global symbol.

------------------------------------------------------------------------------
FIXED  SDSCM00041925
------------------------------------------------------------------------------

Summary            : C++ name mangling for global string object causes linker
		     conflict if project contains files with same filename

Fixed in           : 4.9.2
Severity           : S2 - Major
Affected Component : C/C++ Compiler (cl)

Description: 
In a project where global stdstring objects are defined with different
names but in files in different directories but with the same filename,
the linker generates a multiply defined error message for the objects.

------------------------------------------------------------------------------
FIXED  SDSCM00042007
------------------------------------------------------------------------------

Summary            : The opcode generated by compiler for STREXH and STREX
		     instructions is incorrect

Fixed in           : 4.9.2
Severity           : S2 - Major
Affected Component : C/C++ Compiler (cl)

Description: 
The opcode generated by the compiler for STREXH and STREX instructions
is incorrect.

The STREXH instruction in assembly source is replaced with a STREXB
opcode.  The STREX R2, R0, [R1] instruction is disassembled as STREX PC, R0,
[R1, #8] 

------------------------------------------------------------------------------
FIXED  SDSCM00042061
------------------------------------------------------------------------------

Summary            : Library building fails when TEMP is moderately long (50+
		     characters)

Fixed in           : 4.9.2
Severity           : S1 - Critical / PS
Affected Component : Runtime Support Libraries (RTS)

Description: 
The ar470 command line is over 32k characters, which runs afoul of the
insurmountable upper limit of the Win32 API CreateProcess.  When this
happens, the user will see a mysterious error which looks something
like this

    process_begin
    CreateProcess(c\progra~1\texasi~1\tms470~2.1\bin\ar470.exe,
    c/progra~1/texasi~1/tms470~2.1/bin/ar470 -qa
    c/docume~1/user.name/locals~1/temp/ti5b2e~1/rtsv7a8_a_le_eabi.lib
    c/docume~1/user.name/locals~1/temp/ti5b2e~1/obj/decode.obj
    <over 500 object files listed here were deleted for clarity>
    c/docume~1/user.name/locals~1/temp/ti5b2e~1/obj/xatexit.obj, ...) 
    failed.
    make (e=87) The parameter is incorrect.

------------------------------------------------------------------------------
FIXED  SDSCM00042103
------------------------------------------------------------------------------

Summary            : Dynamic linking options should be hidden for non-C6000
		     targets

Fixed in           : 4.9.2
Severity           : S3 - Minor
Affected Component : Linker

Description: 
Dynamic linking is not supported for any target but C6000, but the
dynamic linking options were exposed in the shell and linker option
help summary output.  Ignore them.

------------------------------------------------------------------------------
FIXED  SDSCM00042132
------------------------------------------------------------------------------

Summary            : Code moved before NULL pointer check in 'if' statement

Fixed in           : 4.9.2
Severity           : S2 - Major
Affected Component : C/C++ Compiler (cl)

Description: 
Given a sequence like

  pqd = ((pq)->dynamic);
  if ( (((pqd)==0) ? pq->queue[0]  pq->queue[pqd->head]) == qent )

the compiler may arrange to dereference pqd->head before it has tested 
that pqd is non-NULL, causing incorrect behavior if the processor traps
on the bad access.

------------------------------------------------------------------------------
FIXED  SDSCM00042140
------------------------------------------------------------------------------

Summary            : Assembler incorrectly encodes PKHTB instruction if no shift
		     argument is given

Fixed in           : 4.9.2
Severity           : S3 - Minor
Affected Component : Assembler

Description: 
The PKHTB <Rd>, <Rm>, <Rn> instruction is a pseudo-instruction of PKHBT
<Rd>, <Rn>, <Rm>. The assembler incorrectly assembles this instruction
as PKHTB <Rd>, <Rm>, <Rn>, ASR #32. 

------------------------------------------------------------------------------
FIXED  SDSCM00042146
------------------------------------------------------------------------------

Summary            : Quotes in PATH, TEMP, etc on Windows breaks mklib

Fixed in           : 4.9.2
Severity           : S2 - Major
Affected Component : Runtime Support Libraries (RTS)

Description: 
If the PATH environment variable has quotes in it, mklib will crash
with a mysterious error like "CreateProcess(NULL, cl470 atexit.c ...) 
failed.  The system cannot find the file specified."  It is not legal
to have literal quotes in PATH, but as an enhancement, mklib will
attempt to remove quotes from PATH and try again.

------------------------------------------------------------------------------
FIXED  SDSCM00042149
------------------------------------------------------------------------------

Summary            : Signed bitfield in union with unsigned integer treated as
		     unsigned

Fixed in           : 4.9.2
Severity           : S1 - Critical / PS
Affected Component : C/C++ Compiler (cl)

Description: 
Given a union containing a scalar integer field and a struct field 
consisting entirely of bitfields, such that the integer and the
bitfield struct have the same number of bits, a signed bitfield may be treated 
(incorrectly) as unsigned if the scalar integer is unsigned.


------------------------------------------------------------------------------
5. 4.9.1 Fixed Issues
------------------------------------------------------------------------------

------------------------------------------------------------------------------
FIXED  SDSCM00031246
------------------------------------------------------------------------------

Summary            : Zero length Section allocation problem

Fixed in           : 4.9.1
Severity           : S3 - Minor
Affected Component : Linker

Description: 
A zero length output section in a linker command file that contains the
dot expression . += 0x0 will cause a linker error

   .trace fill = 0x0 {
	   _SYS_PUTCBEG = .;
	   . += 0x0;
	   _SYS_PUTCEND = . - 1;
	} > L1SARAM PAGE 1


   placement fails for object ".trace", size 0x0 (page 1).  Available
ranges
   L1SARAM	size 0x1000	  unused 0x22e	      max hole 0x22c   
 
   error errors encountered during linking;

------------------------------------------------------------------------------
FIXED  SDSCM00037878
------------------------------------------------------------------------------

Summary            : Linker generates relocation errors for symbols already in
		     bss

Fixed in           : 4.9.1
Severity           : S3 - Minor
Affected Component : Linker

Description: 
If a partially linked out file does not include any bss variables the
linker will still create a "$bss" symbol with a value of 0. This
ensures that if this code is linked with boot code the DP is set to
some known value. However, if this partially llinked file is later
linked with code that includes bss variables, the linker may set $bss
to an incorrect value. This will lead to relocation errors during the
final link.

NOTE Use of several .bss output sections is not support by the current
linkers. The following will generate relocation errors

	    .bsssubsect1
	    {
		 f1.out (.bsssubsect1)
		}

	    .bsssubsect2
	    {
	      f1.out (.bsssubsect2)
		}
	
	.bss
	{
	. += 0x2100;
	*(.bss)
	}

The global symbol $bss needs to be defined to the start of the .bss
section to perform the relocations. The above would have to be written
as

bss
	{
	. += 0x2100;
      f1.out (.bsssubsect1)
     f1.out (.bsssubsect2)
	*(.bss)
	}

------------------------------------------------------------------------------
FIXED  SDSCM00039539
------------------------------------------------------------------------------

Summary            : Problem with register save/restore for function

Fixed in           : 4.9.1
Severity           : S2 - Major
Affected Component : Code Generator

Description: 
In certain cases, register save and restore in a function appears to be
incorrect.  In the case reported, a returned value is overwritten.

The store of the function return value to the return register memory
location on the stack must happen immediately before the return
register is popped off the stack. 

------------------------------------------------------------------------------
FIXED  SDSCM00039569
------------------------------------------------------------------------------

Summary            : Optimizer removes compare in single iteration do-while loop

Fixed in           : 4.9.1
Severity           : S2 - Major
Affected Component : Optimizer

Description: 
In the following code

    var1 = 1;
     
    do
    {
      var1--;
      if (((var1 < 1U))==0) {(foo(((unsigned char) 0x02)));};
    }
    while (var1 != 0);

the optimizer removes the compare and unconditionally calls the routine
"foo". 

The conditions for this bug to occur would be

1. The loop must be a single iteration.
2. The loop induction variable must be initialized to 1.
3. The first reference to the induction variable must be an expression
that decrements the loop counter to 0.
4. The loop is a single iteration loop because the loop must break when
the induction variable is equal to 0.
5. The next reference to the loop counter must be in a compare
expression that can be reduced at compile time to (1 == 0).

Under these conditions the optimizer could remove the compare
expression causing code within the if block to execute.

------------------------------------------------------------------------------
FIXED  SDSCM00039655
------------------------------------------------------------------------------

Summary            : ARM linker fails when generating BE-8 code from a partially
		     linked object file

Fixed in           : 4.9.1
Severity           : S2 - Major
Affected Component : ELF Linker

Description: 
This bug has the following requirements

1. The link must be generating BE-8 code
2. The object file format must be ELF.
3. A relocatable input file must have a code section that starts at a
non-zero address.

The only way to generate an ELF relocatable file with a section with a 
non-zero address is through partial linking. 

------------------------------------------------------------------------------
FIXED  SDSCM00039690
------------------------------------------------------------------------------

Summary            : Compiling with VFPv3D16 causes internal error

Fixed in           : 4.9.1
Severity           : S2 - Major
Affected Component : Code Generator

Description: 
This bug can occur when returning a structure from a function where the
structure is returned in VFP registers. This can occur if the structure
is either all float or all double and has no more than 4 fields.

------------------------------------------------------------------------------
FIXED  SDSCM00040062
------------------------------------------------------------------------------

Summary            : ARM compiler does not support the ARM_THM_PC8 relocation
		     type

Fixed in           : 4.9.1
Severity           : S3 - Minor
Affected Component : Linker

Description: 
This relocation type is not generated by the TI toolchain. It is 
generated by the IAR compiler for loading data from literal pools.

------------------------------------------------------------------------------
FIXED  SDSCM00040264
------------------------------------------------------------------------------

Summary            : optimizer reduces WRITE to volatile in a loop to a single
		     WRITE to volatile after the loop

Fixed in           : 4.9.1
Severity           : S2 - Major
Affected Component : Optimizer

Description: 
A volatile access may not be properly handled if the volatile qualifier
is only present on the field in the definition of a struct, as opposed
to the struct type as a whole or the variable itself.

------------------------------------------------------------------------------
FIXED  SDSCM00040365
------------------------------------------------------------------------------

Summary            : Mixing direct and indirect accesses to same variable may
		     give wrong answer

Fixed in           : 4.9.1
Severity           : S2 - Major
Affected Component : C/C++ Compiler (cl)

Description: 
Referring to the same variable both directly and indirectly -- eg,
given p[0]=&a, using both *p[0] and a in the same function -- may produce the
wrong answer when the alias between the two references is missed.

------------------------------------------------------------------------------
FIXED  SDSCM00040369
------------------------------------------------------------------------------

Summary            : Assignment to local struct variable with recurrence may
		     assign some fields incorrectly

Fixed in           : 4.9.1
Severity           : S2 - Major
Affected Component : C/C++ Compiler (cl)

Description: 
Given a struct type that contains a pointer to the same type, as in

  struct st {
      struct st *next;
      int    val;
  }

and a local variable X of that type, and an assignment to that variable
like

  X = *(X.next);

some fields of X may not be written correctly.	(Because X.next is
written before the read of *(X.next) has completed.)

------------------------------------------------------------------------------
FIXED  SDSCM00040372
------------------------------------------------------------------------------

Summary            : Variable with volatile inside loop resulted in codegen
		     INTERNAL ERROR.

Fixed in           : 4.9.1
Severity           : S2 - Major
Affected Component : C/C++ Compiler (cl)

------------------------------------------------------------------------------
FIXED  SDSCM00040377
------------------------------------------------------------------------------

Summary            : Error with va_end() as left operand of void expression

Fixed in           : 4.9.1
Severity           : S2 - Major
Affected Component : C/C++ Compiler (cl)

Description: 
The macro va_end should be legal in a void expression context such as
the left hand operand of the comma operator.  This means the macro needs to
expand to a void expression rather than be an empty macro.

------------------------------------------------------------------------------
FIXED  SDSCM00040400
------------------------------------------------------------------------------

Summary            : Bitfield alias may be missed when struct is smaller than
		     field type

Fixed in           : 4.9.1
Severity           : S2 - Major
Affected Component : C/C++ Compiler (cl)

Description: 
An alias may be missed, and incorrect answers result, when a struct 
contains a bitfield and the struct's total size is smaller than the
size of the bitfield's type.  Eg, a field like "int x6" -- the bitfield is 6
bits but int is 16 or 32.  Making both direct and indirect accesses to 
the same field may be an additional requirement to exhibit this
problem.

------------------------------------------------------------------------------
FIXED  SDSCM00040459
------------------------------------------------------------------------------

Summary            : Division or modulo by most-negative-value of type may
		     produce incorrect answer

Fixed in           : 4.9.1
Severity           : S2 - Major
Affected Component : Optimizer

Description: 
Division or modulo when the divisor is the most-negative-value of a 
signed type (eg, -128 for signed-char for C6x) may produce the wrong 
answer. 

------------------------------------------------------------------------------
FIXED  SDSCM00040487
------------------------------------------------------------------------------

Summary            : packed attribute given before the member list of a CSU may
		     produce bad code

Fixed in           : 4.9.1
Severity           : S3 - Minor
Affected Component : Parser

Description: 
A class/union/struct type declared with the packed attribute preceding 
its member list can result in the generation of incorrect code.

------------------------------------------------------------------------------
FIXED  SDSCM00040497
------------------------------------------------------------------------------

Summary            : DSECT failure

Fixed in           : 4.9.1
Severity           : S2 - Major
Affected Component : Linker

Description: 
In some cases, code allocated to a DSECT type output section may be 
included in the output file.  This is known to occur if the code in the
DSECT references a function that is not allocated to a DSECT.

------------------------------------------------------------------------------
FIXED  SDSCM00040552
------------------------------------------------------------------------------

Summary            : The math.h header file violates EABI by exposing internal
		     functions suchas _Sin

Fixed in           : 4.9.1
Severity           : S2 - Major
Affected Component : Runtime Support Libraries (RTS)

Description: 
This problem should only affect users trying to interlink with other 
vendors, specifically using TI produced object files with another
vendor's linker. The user will most likely experience an unresolved
symbol error. Affected functions include cos, cosh, log, log10, sin,
sinh, and log2 (including single and long double variants).

------------------------------------------------------------------------------
FIXED  SDSCM00040610
------------------------------------------------------------------------------

Summary            : The ARM compiler does not save the FPEXC register upon
		     entry to an interrupt function.

Fixed in           : 4.9.1
Severity           : S3 - Minor
Affected Component : Code Generator

Description: 
The FPEXC register is now saved upon entry to an interrupt function.

------------------------------------------------------------------------------
FIXED  SDSCM00040622
------------------------------------------------------------------------------

Summary            : Compiler may miss alias of struct returned from call if
		     contains bitfield and fits in int

Fixed in           : 4.9.1
Severity           : S2 - Major
Affected Component : C/C++ Compiler (cl)

Description: 
The compiler may convert local struct variables of struct type into
simple ints, if the struct is small enough and all fields are bitfields.  If 
such a converted struct is also returned from a function call, the 
compiler may miss an alias between the returned-value struct and the 
local struct.

------------------------------------------------------------------------------
FIXED  SDSCM00040623
------------------------------------------------------------------------------

Summary            : Mixing direct and indirect accesses to same variable may
		     give wrong answer

Fixed in           : 4.9.1
Severity           : S2 - Major
Affected Component : C/C++ Compiler (cl)

Description: 
Referring to the same variable both directly and indirectly -- eg,
given p=&a, using both *p and a in the same function -- may produce the wrong
answer when the alias between the two references is missed.

------------------------------------------------------------------------------
FIXED  SDSCM00040651
------------------------------------------------------------------------------

Summary            : Return statement with embedded assignment from a
		     post-increment or -decrement may return wrong value

Fixed in           : 4.9.1
Severity           : S2 - Major
Affected Component : C/C++ Compiler (cl)

Description: 
A statement like "return j = i++" may return the value of i after it
has been incremented, when it should return the value before the increment.
 
It's possible that other cases exist, but all will involve an
assignment of a post-increment or post-decrement embedded in another statement.

------------------------------------------------------------------------------
FIXED  SDSCM00040658
------------------------------------------------------------------------------

Summary            : Taking the address of a static local variable may lead to a
		     missed alias

Fixed in           : 4.9.1
Severity           : S2 - Major
Affected Component : Optimizer

Description: 
Accessing a static local variable both directly and indirectly, by
taking its address, may miss an alias and produce incorrect behavior.

------------------------------------------------------------------------------
FIXED  SDSCM00040659
------------------------------------------------------------------------------

Summary            : Mixing direct and indirect accesses to same variable may
		     give wrong answer

Fixed in           : 4.9.1
Severity           : S2 - Major
Affected Component : C/C++ Compiler (cl)

Description: 
Referring to the same variable both directly and indirectly -- eg,
given p=&a, using both *p and a in the same function -- may produce the wrong
answer when the alias between the two references is missed.

------------------------------------------------------------------------------
FIXED  SDSCM00040665
------------------------------------------------------------------------------

Summary            : Anonymous function call that can resolve to direct pure
		     call may cause compiler crash

Fixed in           : 4.9.1
Severity           : S2 - Major
Affected Component : Optimizer

Description: 
If an anonymous function call -- a call using a pointer-to-function 
variable rather than a direct function name -- can be resolved to a 
direct call to a known function with no side effects, in some cases the
compiler may crash.

------------------------------------------------------------------------------
FIXED  SDSCM00040698
------------------------------------------------------------------------------

Summary            : Optimiser may crash if given loop nest in which innermost
		     loop unconditionally returns

Fixed in           : 4.9.1
Severity           : S2 - Major
Affected Component : Optimizer

Description: 
A loop nest with an inner loop that returns unconditionally may cause
the optimiser to crash.

------------------------------------------------------------------------------
FIXED  SDSCM00040793
------------------------------------------------------------------------------

Summary            : Accessing the same variable both directly and via
		     pointer-to-void may miss the alias

Fixed in           : 4.9.1
Severity           : S2 - Major
Affected Component : C/C++ Compiler (cl)

Description: 
If the same variable is referred to both directly and via a 
pointer-to-void parameter, the compiler may not detect that both
accesses are to the same variable.

------------------------------------------------------------------------------
FIXED  SDSCM00040908
------------------------------------------------------------------------------

Summary            : Hex converter crashes with segmentation fault

Fixed in           : 4.9.1
Severity           : S2 - Major
Affected Component : Hex Converter (hex)

Description: 
Hex converter crashes with segmentation fault if more than 15 --exclude
options are used.

------------------------------------------------------------------------------
FIXED  SDSCM00041342
------------------------------------------------------------------------------

Summary            : The ARM compiler does not generate correct code for
		     interrupts in Thumb-2 mode

Fixed in           : 4.9.1
Severity           : S2 - Major
Affected Component : Code Generator

------------------------------------------------------------------------------
FIXED  SDSCM00041349
------------------------------------------------------------------------------

Summary            : Packed struct containing struct may cause optimiser abort

Fixed in           : 4.9.1
Severity           : S2 - Major
Affected Component : Optimizer

Description: 
Given a struct with attribute "packed," which contains as a field
another struct, with a total size no more than 64 bits, and a struct assignment
whose right-hand side is const (declaring a struct with an 
auto-initialisation will make such an assignment), the optimiser may
abort.

------------------------------------------------------------------------------
FIXED  SDSCM00041391
------------------------------------------------------------------------------

Summary            : The _sxth, _sxtb, _uxtb, and _uxth intrinsics should be
		     supported for Cortex-M3

Fixed in           : 4.9.1
Severity           : S3 - Minor
Affected Component : Parser

Description: 
The compiler supports intrinsics for SXTB, SXTH, UXTB, and UXTH 
instructions. These are supported for Cortex-M3, but were not accepted
as intrinsics for that target.

------------------------------------------------------------------------------
FIXED  SDSCM00041395
------------------------------------------------------------------------------

Summary            : scanf %1f should stop after one character

Fixed in           : 4.9.1
Severity           : S3 - Minor
Affected Component : Runtime Support Libraries (RTS)

Description: 
The scanf format %1f should stop after one character of input, but it 
ignores the field width and keeps parsing as long as the input looks
like a floating-point number.

------------------------------------------------------------------------------
FIXED  SDSCM00041396
------------------------------------------------------------------------------

Summary            : sscanf(" ", "%s", arg) should not modify arg

Fixed in           : 4.9.1
Severity           : S3 - Minor
Affected Component : Runtime Support Libraries (RTS)

Description: 
When the scanf format %s is used, if there are no non-whitespace 
characters in the input, the conversion should fail and should not
modify the argument.

------------------------------------------------------------------------------
FIXED  SDSCM00041397
------------------------------------------------------------------------------

Summary            : scanf %4[..] consumes 5 characters

Fixed in           : 4.9.1
Severity           : S3 - Minor
Affected Component : Runtime Support Libraries (RTS)

Description: 
With a format string containing a %[ conversion specifier with field
width, and input containing a sequence of characters that matches the
scanset and has more characters than the field width, a call to vfscanf
shall assign the number of characters equal to the field width to the
corresponding pointer to character array leaving characters after the
input item unread. 7.19.6.9;2a (161)	

The bug here is that, while _scanfi assigns the correct number of 
characters, it fails to unget the following character, which belongs to
the next conversion.

------------------------------------------------------------------------------
FIXED  SDSCM00041398
------------------------------------------------------------------------------

Summary            : scanf %[..] matching failure should return immediately

Fixed in           : 4.9.1
Severity           : S3 - Minor
Affected Component : Runtime Support Libraries (RTS)

Description: 
When a conversion fails, scanf should return immediately.  In these
test cases, scanf erroneously keeps going.  scanf eventually reports a
return value that is too large.

------------------------------------------------------------------------------
FIXED  SDSCM00041442
------------------------------------------------------------------------------

Summary            : printf("%#.4o",345) adds too many zeros

Fixed in           : 4.9.1
Severity           : S3 - Minor
Affected Component : Runtime Support Libraries (RTS)

Description: 
When using the # printf format flag, printf should only add an extra
"0" at the beginning of the number if it isn't already "0".

------------------------------------------------------------------------------
FIXED  SDSCM00041447
------------------------------------------------------------------------------

Summary            : printf("%#.0o",0) fails to write "0"

Fixed in           : 4.9.1
Severity           : S3 - Minor
Affected Component : Runtime Support Libraries (RTS)

Description: 
For *printf functions, the C standard requires that if the value is 0,
the precision is 0, and the # flag is used, a single "0" will be
printed.

------------------------------------------------------------------------------
FIXED  SDSCM00041550
------------------------------------------------------------------------------

Summary            : sscanf %% failure not handled correctly

Fixed in           : 4.9.1
Severity           : S3 - Minor
Affected Component : Runtime Support Libraries (RTS)

Description: 
scanf fails in these ways when the %% conversion specifier fails
When any sort of error occurs with %%, scanf immediately returns EOF. 
It should instead return EOF only if there were 0 previous successful
conversions and there was an input failure.  If the failure was either
a matching failure, or there were any previous successful conversions,
it should return the number of previous successful conversions.

When the failure is a matching failure, scanf should unget the
character that didn't match.  It fails to do so.

------------------------------------------------------------------------------
FIXED  SDSCM00041551
------------------------------------------------------------------------------

Summary            : scanf %d and %f should immediately return upon input
		     failure, even if ordinary characters
		     were matched

Fixed in           : 4.9.1
Severity           : S3 - Minor
Affected Component : Runtime Support Libraries (RTS)

Description: 
scanf should immediately return when an input failure occurs, even if 
ordinary characters in the format were already successfully matched. 
This bug affects all of the integer and float conversions.

------------------------------------------------------------------------------
FIXED  SDSCM00041552
------------------------------------------------------------------------------

Summary            : sscanf.c _chkmbc should return EOF on input failure

Fixed in           : 4.9.1
Severity           : S3 - Minor
Affected Component : Runtime Support Libraries (RTS)

Description: 
It should be possible for sscanf to return EOF on a string if an input
error occurs (the end of the input string is reached before the format
string is exhausted), but it does not return EOF as appropriate.

------------------------------------------------------------------------------
FIXED  SDSCM00041553
------------------------------------------------------------------------------

Summary            : scanf input failure when looking for ordinary characters
		     always returns EOF

Fixed in           : 4.9.1
Severity           : S3 - Minor
Affected Component : Runtime Support Libraries (RTS)

Description: 
When matching ordinary characters in the format string, if there is an
input failure, scanf should return EOF only if there were no previous
successful conversions.  If there were any, it should return the
number of previous successful conversions.

------------------------------------------------------------------------------
FIXED  SDSCM00041554
------------------------------------------------------------------------------

Summary            : scanf %e and %[ should not return EOF on matching failure

Fixed in           : 4.9.1
Severity           : S3 - Minor
Affected Component : Runtime Support Libraries (RTS)

Description: 
When using %f (or other floating-point conversion specifier) or %[, if
a matching failure occurs before even one character is matched, scanf
will return EOF instead of 0 as the standard requires.


------------------------------------------------------------------------------
6. Current Known Issues
------------------------------------------------------------------------------

------------------------------------------------------------------------------
KNOWN ISSUE  SDSCM00035379
------------------------------------------------------------------------------

Summary            : C++ requires overloaded abs() and div() in stdlib.h
Affected Component : Runtime Support Libraries (RTS)

Description: 
ISO14882 (C++) 26.5 (C Library) requires overloaded versions of a bunch
of standard C functions.  The floating-point counterpart of abs() was
added to math.h, but we also need "long" versions of abs() and div() in
stdlib.h.  See also SDSCM00028948 and commit #16636.

------------------------------------------------------------------------------
KNOWN ISSUE  SDSCM00036770
------------------------------------------------------------------------------

Summary            : LDREXD and STREXD instructions erroneously generate errors
		     on Cortex A8 and R4
Affected Component : Assembler

Description: 
LDREXD and STREXD are valid instructions on Cortex R4 and A8
architectures but the assembler generates errors.  The first error
states that [Rn] must be a register indirect and the second complains
of unexpected trailing operands.

------------------------------------------------------------------------------
KNOWN ISSUE  SDSCM00036773
------------------------------------------------------------------------------

Summary            : LDM/STM -DA/FA/IB/ED viariant instructions erroneously
		     accepted by assembler for Cortex-M3
Affected Component : Assembler

Description: 
LDM and STM instructions ending with DA, FA, IB and ED are not
available in the Thumb instruction set, but the assembler accepts these
for Cortex-M3 and converts them to LDM and STM instructions ending with
IA.W.  

------------------------------------------------------------------------------
KNOWN ISSUE  SDSCM00036874
----------------------------------->-------------------------------------------

Summary            : Section relative ELF symbol values in partially linking
		     object files should hold the section
		     offset for the symbol
Affected Component : ELF Linker

Description: 
The symbol value in an ELF relocatable file should be the offset from
the beginning of the section. Typically the sections all start at
address 0, so the value corresponds to its address in the file. In a
partially linking object file, the sections will start at different
addresses. The symbol values contain the absolute address instead of
the offset.

------------------------------------------------------------------------------
KNOWN ISSUE  SDSCM00037086
------------------------------------------------------------------------------

Summary            : ARM assembler allows incorrect VFP registers for some
		     instructions on D16 VFP architectures
Affected Component : Assembler

Description: 
ARM assembler allows the use of VFP registers D16-D31 on D16 VFP
targets for the following VFP instructions  single and multiple loads
and stores, pop, push, and register transfers between VFP and core
registers.

------------------------------------------------------------------------------
KNOWN ISSUE  SDSCM00037227
------------------------------------------------------------------------------

Summary            : ARM disassembler error for VMRS instruction
Affected Component : Disassembler (dis)

Description: 
The ARM disassembler errorneously disassembles "VMRS APSR_[bits],
FPSCR" as "VMSR PC, FPSCR".

------------------------------------------------------------------------------
KNOWN ISSUE  SDSCM00037308
------------------------------------------------------------------------------

Summary            : Assembler does not encode the proper offset for a VLDR
		     immediate instruction in thumb 2 mode
Affected Component : Assembler

Description: 
In thumb 2 mode, the value of the PC register at a given instruction is
PC+4 (in ARM it is PC+8). When encoding the VLDR instruction the
assembler always encodes the instruction as if the PC is PC+8. This
will cause the VLDR instruction to never work correctly in thumb 2
mode.

------------------------------------------------------------------------------
KNOWN ISSUE  SDSCM00038118
------------------------------------------------------------------------------

Summary            : Pow, powf bug in ARM math library
Affected Component : Runtime Support Libraries (RTS)

Description: 
When the result would be smaller than DBL_MIN (or FLT_MIN for powf), the 
call returns +INF instead of 0.0.  For example, pow(DBL_MIN, DBL_MAX) will 
return +INF. 

------------------------------------------------------------------------------
KNOWN ISSUE  SDSCM00038327
------------------------------------------------------------------------------

Summary            : ARM RTS libraries expose enumerations across ABI
		     boundaries, but are marked as having
		     no visible enumerations
Affected Component : Runtime Support Libraries (RTS)

Description: 
The ARM RTS libraries are marked as having no visible enumerations.
This is true for the C library routines, but not the C++. Some C++
header files include inline functions that manipulate enumeration
values.

------------------------------------------------------------------------------
KNOWN ISSUE  SDSCM00039236
------------------------------------------------------------------------------

Summary            : Sometimes MISRA rule 19.15 is incorrectly emitted.  The
		     rule is about failing to use an
		     inclusion guard in a header file.
Affected Component : Parser

------------------------------------------------------------------------------
KNOWN ISSUE  SDSCM00039420
------------------------------------------------------------------------------

Summary            : Compiler issues unwarranted warning for violation of Misra
		     9.2 for zero initialization of multi
		     dimensional arrays
Affected Component : C/C++ Compiler (cl)

------------------------------------------------------------------------------
KNOWN ISSUE  SDSCM00039445
------------------------------------------------------------------------------

Summary            : Interrupt functions are pulled in from libraries even if
		     they are not referenced.
Affected Component : Linker

------------------------------------------------------------------------------
KNOWN ISSUE  SDSCM00039483
------------------------------------------------------------------------------

Summary            : Linker generated CRC tables are not allowed for .cinit in
		     EABI
Affected Component : Linker

Description: 
The linker does not allow linker generated CRC table on the .cinit
output section. This is a bug as it should be supported.

------------------------------------------------------------------------------
KNOWN ISSUE  SDSCM00039492
------------------------------------------------------------------------------

Summary            : Need warning when compiler options conflict with -o4 (LTO)
Affected Component : C/C++ Compiler (cl)

Description: 
Certain compiler options such as -n will terminate the compiler early
which conflicts with the functioning of -o4.

------------------------------------------------------------------------------
KNOWN ISSUE  SDSCM00039600
------------------------------------------------------------------------------

Summary            : Assembler generates error "Register list required" on macro
		     names that begin with 'push' or 'pop'
Affected Component : Assembler

Description: 
The assembler generates the following errors if a macro name that have
contains 'push' or 'pop' at the start of the macro name.

The macro names fail when for ARM7 or CortexR4 targets.    

However the macro names work if CortexM3 is the target.

"forth.asm", ERROR!   at line 4719 [E0004] Register list required
		pushD	tos

"forth.asm", WARNING! at line 4800 [W0004] Invalid instruction
modifier(s)
					    ignored
		popD	tos

------------------------------------------------------------------------------
KNOWN ISSUE  SDSCM00039838
------------------------------------------------------------------------------

Summary            : Linker should issue error message when it detects a
		     trampoline destination is a load
		     address and not a run address
Affected Component : Linker

Description: 
Branching to a load address is not supported.  When a trampoline is
used to branch to a load address, the linker should issue an error
message and not allow it.  Instead, it issues some confusing warnings.  

------------------------------------------------------------------------------
KNOWN ISSUE  SDSCM00041124
------------------------------------------------------------------------------

Summary            : Assembler gives error for SUB instruction with PC as
		     operand
Affected Component : Assembler

Description: 
Assembler gives error for SUB instruction with PC as operand

 sub r2, PC, #4

generates [E0004] Specifying R15 as an operand is illegal.

------------------------------------------------------------------------------
KNOWN ISSUE  SDSCM00041308
------------------------------------------------------------------------------

Summary            : Demangler does not expose the --abi=eabi option through the
		     help or compiler documentation
Affected Component : Demangler (dem)

Description: 
The demangler supports --abi=eabi to switch the demangling scheme for
all targets that support EABI. It is currently not documented, nor is
it displayed if --help is given. 

------------------------------------------------------------------------------
KNOWN ISSUE  SDSCM00041434
------------------------------------------------------------------------------

Summary            : Compiler optimizes away calls to assert without reason
Affected Component : Absolute Lister

Description: 
In certain instances, the compiler incorrectly removes a call to the
assert function.

------------------------------------------------------------------------------
KNOWN ISSUE  SDSCM00041780
------------------------------------------------------------------------------

Summary            : Demangler -h option does not show all the currently
		     available options, such as --abi=eabi
Affected Component : Demangler (dem)

Description: 
The -h option of dem470 does not show all the currently available
options, such as --abi=eabi.  

------------------------------------------------------------------------------
KNOWN ISSUE  SDSCM00042417
------------------------------------------------------------------------------

Summary            : #pragma WEAK; 'if (f)' gets eliminated even if 'f' is a
		     weak function
Affected Component : C/C++ Compiler (cl)

Description: 

#pragma WEAK;
extern void weakFunc();

void func()
{
   if (weakFunc)
      weakFunc();
}

------------------------------------------------------------------------------
KNOWN ISSUE  SDSCM00042418
------------------------------------------------------------------------------

Summary            : Internal error when compiling code with WEAK functions;
		     linker crash
Affected Component : C/C++ Compiler (cl)

------------------------------------------------------------------------------
KNOWN ISSUE  SDSCM00042545
------------------------------------------------------------------------------

Summary            : The raise() function resets the signal handler for the
		     signal type, which is incorrect
Affected Component : Runtime Support Libraries (RTS)

Description: 
The signal() function instates a signal handler for a particular signal
and returns the previous handler. The raise() function uses the
signal() function to determine the current signal handler. In doing so
it replaces the current handler with the default handler. My
understanding of the raise() function is that it is not supposed to
reset the signal handler (GCC handles this appropriately).

------------------------------------------------------------------------------
KNOWN ISSUE  SDSCM00042699
------------------------------------------------------------------------------

Summary            : Linker Internal Error Crash when compiling with -04 (LTO)
Affected Component : C/C++ Compiler (cl)

------------------------------------------------------------------------------
KNOWN ISSUE  SDSCM00042764
------------------------------------------------------------------------------

Summary            : The fpclassify macro results in calls to undeclared
		     functions, _Dclass, _FDclass, and _LDclass in C++
Affected Component : Runtime Support Libraries (RTS)

Description: 
The fpclassify function calls these 3 functions to classify a floating
point number. They are declared inside the std namespace and are also
extern "C". Being that they are in the std namespace, the naked call is
not recognized. 

Workaroud:
The problem can be worked around by including the appropriate using 
directives:

using ::std::_Dclass; using ::std::_FDclass; using ::std::_LDclass

------------------------------------------------------------------------------
KNOWN ISSUE  SDSCM00042973
------------------------------------------------------------------------------

Summary            : ELF loader doesn't zero-initialize difference between "file
		     size" and "mem size"
Affected Component : ELF Linker

------------------------------------------------------------------------------
KNOWN ISSUE  SDSCM00043043
------------------------------------------------------------------------------

Summary            : Array that is correctly initialized erroneously gets a
		     MISRA diagnostic about size not being specified
Affected Component : C/C++ Compiler (cl)

------------------------------------------------------------------------------
KNOWN ISSUE  SDSCM00043099
------------------------------------------------------------------------------

Summary            : __TI_UNWIND_TABLE_START incorrectly set to -1 when split
		     allocation is attempted on .ARM.exidx
Affected Component : Linker

------------------------------------------------------------------------------
KNOWN ISSUE  SDSCM00043121
------------------------------------------------------------------------------

Summary            : MISRA C rule 12.9 checking not correct in the TI ARM v4.9.1
		     compiler
Affected Component : C/C++ Compiler (cl)

------------------------------------------------------------------------------
KNOWN ISSUE  SDSCM00043122
------------------------------------------------------------------------------

Summary            : MISRA C rule 6.4 checking in the TI ARM v4.9.1 compiler not
		     correct
Affected Component : C/C++ Compiler (cl)

------------------------------------------------------------------------------
KNOWN ISSUE  SDSCM00043187
------------------------------------------------------------------------------

Summary            : ELF e_phoff and e_shoff members of the ELF header pointing 
                     to odd file offsets
Affected Component : ELF Linker

------------------------------------------------------------------------------
KNOWN ISSUE  SDSCM00043268
------------------------------------------------------------------------------

Summary            : CCS stack backtrace doesn't seem to work across varags
		     function calls
Affected Component : C/C++ Compiler (cl)

------------------------------------------------------------------------------
KNOWN ISSUE  SDSCM00043502
------------------------------------------------------------------------------

Summary            : packed bit-field leads to internal error
Affected Component : C/C++ Compiler (cl)

------------------------------------------------------------------------------
KNOWN ISSUE  SDSCM00043543
------------------------------------------------------------------------------

Summary            : The CHECK_MISRA pragma does not have an effect for misra
		     rule 2.2
Affected Component : Parser

------------------------------------------------------------------------------
KNOWN ISSUE  SDSCM00043713
------------------------------------------------------------------------------

Summary            : Linker fails with internal error
Affected Component : Linker

------------------------------------------------------------------------------
KNOWN ISSUE  SDSCM00043752
------------------------------------------------------------------------------

Summary            : Linker ignores input sections in certain cases
Affected Component : C/C++ Compiler (cl)

------------------------------------------------------------------------------
KNOWN ISSUE  SDSCM00043848
------------------------------------------------------------------------------

Summary            : hex470 output file cannot contain spaces
Affected Component : Hex Converter (hex)

Description: 
While the hex utility accepts spaces on the output file name, it seems
to split the filename and drop everything after the space when actually
creating the output files.
